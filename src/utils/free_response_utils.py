EASY_DICT = {}
for i in range(100):
    EASY_DICT[i] = str(i)

MEDIUM_DICT = {
    0: "(0x10 >> 4) * 0",
    1: "(0x3 ^ 0x2)",
    2: "(0x6 >> 1) & 0x3 - 1",
    3: "((((0xF >> 2) - 1) % 100) + 1) % 100",
    4: "(0x2 << 1) % 100",
    5: "((((0x3 ^ 0x1) + 2) % 100) + 1) % 100",
    6: "(0x18 >> 2) & 0xF",
    7: "((((0xF >> 1) - 1) % 100) + 1) % 100",
    8: "(0x2 << 2) % 100",
    9: "((0x5 ^ 0x4) + 8) % 100",
    10: "((0x14 >> 1) & 0x1F) % 100",
    11: "((((0x17 >> 1) - 1) % 100) + 1) % 100",
    12: "(0x3 << 2) % 100",
    13: "((0x1A >> 1) - 0) % 100",
    14: "((0x1C >> 1) & 0x1F) % 100",
    15: "((0xF >> 0) & 0x1F) % 100",
    16: "(0x4 << 2) % 100",
    17: "((0x22 >> 1) - 0) % 100",
    18: "((0x24 >> 1) & 0x1F) % 100",
    19: "((0x26 >> 1) - 0) % 100",
    20: "(0x5 << 2) % 100",
    21: "((0x2A >> 1) - 0) % 100",
    22: "((0x2C >> 1) & 0x1F) % 100",
    23: "((0x2E >> 1) - 0) % 100",
    24: "(0x6 << 2) % 100",
    25: "((0x32 >> 1) - 0) % 100",
    26: "((0x34 >> 1) & 0x1F) % 100",
    27: "((0x36 >> 1) - 0) % 100",
    28: "(0x7 << 2) % 100",
    29: "((0x3A >> 1) - 0) % 100",
    30: "((0x3C >> 1) & 0x1F) % 100",
    31: "((0x3E >> 1) - 0) % 100",
    32: "(0x8 << 2) % 100",
    33: "((0x42 >> 1) - 0) % 100",
    34: "((((0x44 >> 1) & 0x1F) % 100) + 32) % 100",
    35: "((0x46 >> 1) - 0) % 100",
    36: "(0x9 << 2) % 100",
    37: "((0x4A >> 1) - 0) % 100",
    38: "((((0x4C >> 1) & 0x1F) % 100) + 32) % 100",
    39: "((0x4E >> 1) - 0) % 100",
    40: "(0xA << 2) % 100",
    41: "((0x52 >> 1) - 0) % 100",
    42: "((((0x54 >> 1) & 0x1F) % 100) + 32) % 100",
    43: "((0x56 >> 1) - 0) % 100",
    44: "(0xB << 2) % 100",
    45: "((0x5A >> 1) - 0) % 100",
    46: "((((0x5C >> 1) & 0x1F) % 100) + 32) % 100",
    47: "((0x5E >> 1) - 0) % 100",
    48: "(0xC << 2) % 100",
    49: "((0x62 >> 1) - 0) % 100",
    50: "((((0x64 >> 1) & 0x1F) % 100) + 32) % 100",
    51: "((0x66 >> 1) - 0) % 100",
    52: "(0xD << 2) % 100",
    53: "((0x6A >> 1) - 0) % 100",
    54: "((((0x6C >> 1) & 0x1F) % 100) + 32) % 100",
    55: "((0x6E >> 1) - 0) % 100",
    56: "(0xE << 2) % 100",
    57: "((0x72 >> 1) - 0) % 100",
    58: "((((0x74 >> 1) & 0x1F) % 100) + 32) % 100",
    59: "((0x76 >> 1) - 0) % 100",
    60: "(0xF << 2) % 100",
    61: "((0x7A >> 1) - 0) % 100",
    62: "((((0x7C >> 1) & 0x1F) % 100) + 32) % 100",
    63: "((0x7E >> 1) - 0) % 100",
    64: "(0x10 << 2) % 100",
    65: "((0x82 >> 1) - 0) % 100",
    66: "((((0x84 >> 1) & 0x1F) % 100) + 64) % 100",
    67: "((0x86 >> 1) - 0) % 100",
    68: "(0x11 << 2) % 100",
    69: "((0x8A >> 1) - 0) % 100",
    70: "((((0x8C >> 1) & 0x1F) % 100) + 64) % 100",
    71: "((0x8E >> 1) - 0) % 100",
    72: "(0x12 << 2) % 100",
    73: "((0x92 >> 1) - 0) % 100",
    74: "((((0x94 >> 1) & 0x1F) % 100) + 64) % 100",
    75: "((0x96 >> 1) - 0) % 100",
    76: "(0x13 << 2) % 100",
    77: "((0x9A >> 1) - 0) % 100",
    78: "((((0x9C >> 1) & 0x1F) % 100) + 64) % 100",
    79: "((0x9E >> 1) - 0) % 100",
    80: "(0x14 << 2) % 100",
    81: "((0xA2 >> 1) - 0) % 100",
    82: "((((0xA4 >> 1) & 0x1F) % 100) + 64) % 100",
    83: "((0xA6 >> 1) - 0) % 100",
    84: "(0x15 << 2) % 100",
    85: "((0xAA >> 1) - 0) % 100",
    86: "((((0xAC >> 1) & 0x1F) % 100) + 64) % 100",
    87: "((0xAE >> 1) - 0) % 100",
    88: "(0x16 << 2) % 100",
    89: "((0xB2 >> 1) - 0) % 100",
    90: "((((0xB4 >> 1) & 0x1F) % 100) + 64) % 100",
    91: "((0xB6 >> 1) - 0) % 100",
    92: "(0x17 << 2) % 100",
    93: "((0xBA >> 1) - 0) % 100",
    94: "((((0xBC >> 1) & 0x1F) % 100) + 64) % 100",
    95: "((0xBE >> 1) - 0) % 100",
    96: "(0x18 << 2) % 100",
    97: "((0xC2 >> 1) - 0) % 100",
    98: "((((0xC4 >> 1) & 0x1F) % 100) + 96) % 100",
    99: "((0xC6 >> 1) - 0) % 100",
}

HARD_DICT = {
    0: "((((0x1A3B ^ 0x1A3B) << 7) + (0x2F4E & 0x0000)) * 0x5C7D + 0x8E9F - 0x8E9F) % 100",
    1: "(((((0x7B2A ^ 0x7B2B) + (0x4C5D << 3) - (0x4C5D << 3) + 0x1F3E - 0x1F3D) * 0x9A8B + 0x6C7D - 0x6C7D) % 100) + -25) % 100",
    2: "((0x3F4E * 0x2B1C + 0x8D9A - 0x3F4E * 0x2B1C - 0x8D98) + (0x5A7B << 4) - (0x5A7B << 4)) % 100",
    3: "(((((0x9C8D ^ 0x9C8E) * 0x4B5A + 0x7E6F - 0x4B5A + 0x1D2C - 0x7E6F - 0x1D29) << 2) % 100) + -29) % 100",
    4: "((0x8F7E * 0x3A2B + 0x6D5C - 0x8F7E * 0x3A2B - 0x6D58) + (0x4E9F << 5) - (0x4E9F << 5)) % 100",
    5: "(((((0x2C5D ^ 0x2C58) + (0x7B8A << 2) - (0x7B8A << 2) + 0x9E4F - 0x9E4A) * 0x1F6E + 0x8D7C - 0x8D7C) % 100) + -55) % 100",
    6: "((0x5E7F * 0x9A1B + 0x3C4D - 0x5E7F * 0x9A1B - 0x3C47) + (0x8B6C << 3) - (0x8B6C << 3)) % 100",
    7: "(((((0x4D6E ^ 0x4D69) * 0x8C7B + 0x2F5A - 0x8C7B + 0x9E1D - 0x2F5A - 0x9E16) << 1) % 100) + -63) % 100",
    8: "((0x7A9B * 0x5C2D + 0x8E4F - 0x7A9B * 0x5C2D - 0x8E47) + (0x3F1E << 4) - (0x3F1E << 4)) % 100",
    9: "(((((0x6B8C ^ 0x6B85) + (0x9D4E << 2) - (0x9D4E << 2) + 0x7F2A - 0x7F21) * 0x5A3B + 0x1C8D - 0x1C8D) % 100) + -73) % 100",
    10: "((0x8E5F * 0x2A7C + 0x9B1D - 0x8E5F * 0x2A7C - 0x9B13) + (0x4F6E << 3) - (0x4F6E << 3)) % 100",
    11: "(((((0x3C7D ^ 0x3C76) * 0x5B9A + 0x8E2F - 0x5B9A + 0x4D1C - 0x8E2F - 0x4D11) << 2) % 100) + -33) % 100",
    12: "((0x9F2E * 0x6A5B + 0x7C8D - 0x9F2E * 0x6A5B - 0x7C81) + (0x1E4F << 4) - (0x1E4F << 4)) % 100",
    13: "(((((0x5D8E ^ 0x5D83) + (0x2F7A << 2) - (0x2F7A << 2) + 0x9C4B - 0x9C38) * 0x7E1F + 0x6A5D - 0x6A5D) % 100) + -71) % 100",
    14: "((0x4B7C * 0x8E9D + 0x2F5A - 0x4B7C * 0x8E9D - 0x2F4C) + (0x6D1E << 3) - (0x6D1E << 3)) % 100",
    15: "(((((0x7E9F ^ 0x7E90) * 0x3A5B + 0x6C8D - 0x3A5B + 0x9F2E - 0x6C8D - 0x9F1F) << 1) % 100) + -7) % 100",
    16: "((0x2D5E * 0x9B7C + 0x4F8A - 0x2D5E * 0x9B7C - 0x4F7A) + (0x8E1F << 4) - (0x8E1F << 4)) % 100",
    17: "(((((0x6C8F ^ 0x6C88) + (0x5A2D << 2) - (0x5A2D << 2) + 0x7E9B - 0x7E84) * 0x4F1C + 0x9D6E - 0x9D6E) % 100) + -43) % 100",
    18: "((((0x8A5D * 0x3F7E + 0x6B9C - 0x8A5D * 0x3F7E - 0x6B86) + (0x2E4F << 3) - (0x2E4F << 3)) % 100) + -4) % 100",
    19: "(((((0x9E7F ^ 0x9E66) * 0x5C8A + 0x2D4B - 0x5C8A + 0x7F1E - 0x2D4B - 0x7F05) << 2) % 100) + -21) % 100",
    20: "((((0x5F8E * 0x2A4D + 0x9C7B - 0x5F8E * 0x2A4D - 0x9C5B) + (0x7E1F << 4) - (0x7E1F << 4)) % 100) + -12) % 100",
    21: "(((((0x3D6E ^ 0x3D4A) + (0x8B5C << 2) - (0x8B5C << 2) + 0x4F9A - 0x4F75) * 0x2E7F + 0x6C1D - 0x6C1D) % 100) + 2) % 100",
    22: "((((0x7C9F * 0x5E2A + 0x8D4B - 0x7C9F * 0x5E2A - 0x8D25) + (0x1F6E << 3) - (0x1F6E << 3)) % 100) + -16) % 100",
    23: "(((((0x4E8F ^ 0x4E68) * 0x9A5C + 0x7B2D - 0x9A5C + 0x6E1F - 0x7B2D - 0x6DF8) << 1) % 100) + -15) % 100",
    24: "((((0x6D7E * 0x8F5A + 0x2C9B - 0x6D7E * 0x8F5A - 0x2C77) + (0x5E4F << 4) - (0x5E4F << 4)) % 100) + -12) % 100",
    25: "(((((0x8C5F ^ 0x8C46) + (0x7A2E << 2) - (0x7A2E << 2) + 0x9D4B - 0x9D26) * 0x1F8E + 0x4C6D - 0x4C6D) % 100) + -11) % 100",
    26: "((((0x2F6E * 0x9C8D + 0x5A7B - 0x2F6E * 0x9C8D - 0x5A55) + (0x8E1F << 3) - (0x8E1F << 3)) % 100) + -12) % 100",
    27: "(((((0x7E5F ^ 0x7E44) * 0x3B9A + 0x6C8D - 0x3B9A + 0x2F5E - 0x6C8D - 0x2F43) << 2) % 100) + -13) % 100",
    28: "((((0x5A8E * 0x4D7F + 0x9B2C - 0x5A8E * 0x4D7F - 0x9B08) + (0x7E1F << 4) - (0x7E1F << 4)) % 100) + -8) % 100",
    29: "(((((0x9C7E ^ 0x9C51) + (0x6B5A << 2) - (0x6B5A << 2) + 0x8D4F - 0x8D20) * 0x5E2F + 0x7A1C - 0x7A1C) % 100) + -5) % 100",
    30: "((((0x4E9F * 0x7C5A + 0x8B2D - 0x4E9F * 0x7C5A - 0x8B03) + (0x2F6E << 3) - (0x2F6E << 3)) % 100) + -12) % 100",
    31: "(((((0x6D8F ^ 0x6D60) * 0x5A2C + 0x9E7B - 0x5A2C + 0x4F1E - 0x9E7B - 0x4EEF) << 1) % 100) + -47) % 100",
    32: "((0x8F7E * 0x2A6D + 0x5C9B - 0x8F7E * 0x2A6D - 0x5C7B) + (0x1E4F << 5) - (0x1E4F << 5)) % 100",
    33: "(((((0x3C5E ^ 0x3C2D) + (0x9B7A << 2) - (0x9B7A << 2) + 0x6E8F - 0x6E5E) * 0x7F2D + 0x5A1C - 0x5A1C) % 100) + -15) % 100",
    34: "((((0x7A9E * 0x5F8C + 0x2D4B - 0x7A9E * 0x5F8C - 0x2D15) + (0x6E1F << 3) - (0x6E1F << 3)) % 100) + -20) % 100",
    35: "(((((0x5E7F ^ 0x5E42) * 0x8C9A + 0x4D6B - 0x8C9A + 0x7F2E - 0x4D6B - 0x7EF1) << 2) % 100) + 31) % 100",
    36: "((((0x9C8E * 0x3F5A + 0x7B2D - 0x9C8E * 0x3F5A - 0x7AF1) + (0x5E4F << 4) - (0x5E4F << 4)) % 100) + -24) % 100",
    37: "(((((0x4D7E ^ 0x4D43) + (0x8A5C << 2) - (0x8A5C << 2) + 0x9F6B - 0x9F30) * 0x2E1F + 0x6C8D - 0x6C8D) % 100) + -3) % 100",
    38: "((((0x6E8F * 0x9A5C + 0x3D7B - 0x6E8F * 0x9A5C - 0x3D39) + (0x7F2E << 3) - (0x7F2E << 3)) % 100) + -28) % 100",
    39: "(((((0x8F5E ^ 0x8F1D) * 0x6C7A + 0x2D9B - 0x6C7A + 0x5E4F - 0x2D9B - 0x5E0E) << 1) % 100) + -31) % 100",
    40: "((((0x2D6E * 0x8F9C + 0x5A7B - 0x2D6E * 0x8F9C - 0x5A13) + (0x4E1F << 5) - (0x4E1F << 5)) % 100) + 36) % 100",
    41: "(((((0x7C5F ^ 0x7BB6) + (0x9A9E << 2) - (0x9A9E << 2) + 0x6D7B - 0x6CD2) * 0x5F5E + 0x8A2C - 0x8A2C) % 100) + 25) % 100",
    42: "((((0x5E9F * 0x4C7A + 0x8D9B - 0x5E9F * 0x4C7A - 0x8C3F) + (0x2F1E << 3) - (0x2F1E << 3)) % 100) + -6) % 100",
    43: "(((((0x9D7E ^ 0x9CD3) * 0x5A9C + 0x7F7B - 0x5A9C + 0x4E1D - 0x7F7B - 0x4D72) << 2) % 100) + 7) % 100",
    44: "((((0x4F8E * 0x7C9A + 0x9B5D - 0x4F8E * 0x7C9A - 0x9A75) + (0x6E2F << 5) - (0x6E2F << 5)) % 100) + 12) % 100",
    45: "(((((0x6C8F ^ 0x6C12) + (0x5A9E << 2) - (0x5A9E << 2) + 0x8D7B - 0x8CFE) * 0x2F5E + 0x7C1D - 0x7C1D) % 100) + 13) % 100",
    46: "((((0x8E7F * 0x2A9C + 0x6D7B - 0x8E7F * 0x2A9C - 0x6C69) + (0x5F2E << 3) - (0x5F2E << 3)) % 100) + -28) % 100",
    47: "(((((0x3D5E ^ 0x3CE1) * 0x9C7A + 0x4F9B - 0x9C7A + 0x6E5D - 0x4F9B - 0x6DE0) << 2) % 100) + -25) % 100",
    48: "((((0x7F9E * 0x5C7D + 0x2A8B - 0x7F9E * 0x5C7D - 0x2967) + (0x1E2F << 4) - (0x1E2F << 4)) % 100) + -44) % 100",
    49: "(((((0x5C7E ^ 0x5BFD) + (0x8F7A << 2) - (0x8F7A << 2) + 0x6D8B - 0x6D0A) * 0x4E5F + 0x9A2C - 0x9A2C) % 100) + -27) % 100",
    50: "((((0x9E8F * 0x3A9C + 0x5D7B - 0x9E8F * 0x3A9C - 0x5C3B) + (0x7F1E << 3) - (0x7F1E << 3)) % 100) + 30) % 100",
    51: "(((((0x4E7F ^ 0x4DFC) * 0x6C9A + 0x8D7B - 0x6C9A + 0x2F5E - 0x8D7B - 0x2EDB) << 1) % 100) + -3) % 100",
    52: "((((0x6D9E * 0x8F7C + 0x7A5B - 0x6D9E * 0x8F7C - 0x7920) + (0x5E2F << 5) - (0x5E2F << 5)) % 100) + 37) % 100",
    53: "(((((0x8C5F ^ 0x8BDA) + (0x7A7E << 2) - (0x7A7E << 2) + 0x5D8B - 0x5D06) * 0x1F5E + 0x4C9D - 0x4C9D) % 100) + 13) % 100",
    54: "((((0x2F7E * 0x9C9A + 0x6D7B - 0x2F7E * 0x9C9A - 0x6C55) + (0x8E2F << 3) - (0x8E2F << 3)) % 100) + -40) % 100",
    55: "(((((0x7E5F ^ 0x7DD8) * 0x3B7A + 0x9C9D - 0x3B7A + 0x5F1E - 0x9C9D - 0x5E97) << 2) % 100) + 7) % 100",
    56: "((((0x5A8E * 0x4D7F + 0x7C9B - 0x5A8E * 0x4D7F - 0x7BFB) + (0x2E5F << 4) - (0x2E5F << 4)) % 100) + -4) % 100",
    57: "(((((0x9C7E ^ 0x9BF1) + (0x6B7A << 2) - (0x6B7A << 2) + 0x8D9F - 0x8D12) * 0x5E2F + 0x7A5C - 0x7A5C) % 100) + 21) % 100",
    58: "((((0x4E9F * 0x7C7A + 0x5D9B - 0x4E9F * 0x7C7A - 0x5CE9) + (0x6F5E << 3) - (0x6F5E << 3)) % 100) + -20) % 100",
    59: "(((((0x6D8F ^ 0x6D00) * 0x5A7C + 0x7E9B - 0x5A7C + 0x4F1E - 0x7E9B - 0x4E8F) << 1) % 100) + -3) % 100",
    60: "((((0x8F7E * 0x2A9D + 0x9C5B - 0x8F7E * 0x2A9D - 0x9B43) + (0x1E2F << 5) - (0x1E2F << 5)) % 100) + -20) % 100",
    61: "(((((0x3C5E ^ 0x3BCD) + (0x9B7A << 2) - (0x9B7A << 2) + 0x6E9F - 0x6E0E) * 0x7F2D + 0x5A5C - 0x5A5C) % 100) + -27) % 100",
    62: "((((0x7A9E * 0x5F9C + 0x2D7B - 0x7A9E * 0x5F9C - 0x2C41) + (0x6E5F << 3) - (0x6E5F << 3)) % 100) + 48) % 100",
    63: "(((((0x5E7F ^ 0x5DEC) * 0x8C7A + 0x4D9B - 0x8C7A + 0x7F1E - 0x4D9B - 0x7E8B) << 2) % 100) + 3) % 100",
    64: "((((0x9C8E * 0x3F9A + 0x6B7D - 0x9C8E * 0x3F9A - 0x6A1F) + (0x5E1F << 4) - (0x5E1F << 4)) % 100) + 14) % 100",
    65: "(((((0x4D7E ^ 0x4CE3) + (0x8A7C << 2) - (0x8A7C << 2) + 0x9F9B - 0x9F00) * 0x2E1F + 0x6C5D - 0x6C5D) % 100) + -11) % 100",
    66: "((((0x6E8F * 0x9A9C + 0x3D7B - 0x6E8F * 0x9A9C - 0x3BF7) + (0x7F5E << 3) - (0x7F5E << 3)) % 100) + -22) % 100",
    67: "(((((0x8F5E ^ 0x8EBD) * 0x6C7A + 0x2D9B - 0x6C7A + 0x5E5F - 0x2D9B - 0x5DBE) << 1) % 100) + 65) % 100",
    68: "((((0x2D6E * 0x8F9C + 0x5A7B - 0x2D6E * 0x8F9C - 0x58AB) + (0x4E1F << 5) - (0x4E1F << 5)) % 100) + 4) % 100",
    69: "(((((0x7C5F ^ 0x7BE6) + (0x9A7E << 2) - (0x9A7E << 2) + 0x6D8B - 0x6D12) * 0x5F5E + 0x8A2C - 0x8A2C) % 100) + -3) % 100",
    70: "((((0x5E9F * 0x4C7A + 0x8D9B - 0x5E9F * 0x4C7A - 0x8C3F) + (0x2F1E << 3) - (0x2F1E << 3)) % 100) + 22) % 100",
    71: "(((((0x9D7E ^ 0x9CD3) * 0x5A9C + 0x7F7B - 0x5A9C + 0x4E1D - 0x7F7B - 0x4D72) << 2) % 100) + 35) % 100",
    72: "((((0x4F8E * 0x7C9A + 0x9B5D - 0x4F8E * 0x7C9A - 0x9A75) + (0x6E2F << 5) - (0x6E2F << 5)) % 100) + 40) % 100",
    73: "(((((0x6C8F ^ 0x6C12) + (0x5A9E << 2) - (0x5A9E << 2) + 0x8D7B - 0x8CFE) * 0x2F5E + 0x7C1D - 0x7C1D) % 100) + 41) % 100",
    74: "((0x8E7F * 0x2A9C + 0x6D7B - 0x8E7F * 0x2A9C - 0x6C69) + (0x5F2E << 3) - (0x5F2E << 3)) % 100",
    75: "(((((0x3D5E ^ 0x3CE1) * 0x9C7A + 0x4F9B - 0x9C7A + 0x6E5D - 0x4F9B - 0x6DE0) << 2) % 100) + 3) % 100",
    76: "((((0x7F9E * 0x5C7D + 0x2A8B - 0x7F9E * 0x5C7D - 0x2967) + (0x1E2F << 4) - (0x1E2F << 4)) % 100) + -16) % 100",
    77: "(((((0x5C7E ^ 0x5BFD) + (0x8F7A << 2) - (0x8F7A << 2) + 0x6D8B - 0x6D0A) * 0x4E5F + 0x9A2C - 0x9A2C) % 100) + 1) % 100",
    78: "((((0x9E8F * 0x3A9C + 0x5D7B - 0x9E8F * 0x3A9C - 0x5C3B) + (0x7F1E << 3) - (0x7F1E << 3)) % 100) + 58) % 100",
    79: "(((((0x4E7F ^ 0x4DFC) * 0x6C9A + 0x8D7B - 0x6C9A + 0x2F5E - 0x8D7B - 0x2EDB) << 1) % 100) + 25) % 100",
    80: "((((0x6D9E * 0x8F7C + 0x7A5B - 0x6D9E * 0x8F7C - 0x7920) + (0x5E2F << 5) - (0x5E2F << 5)) % 100) + 65) % 100",
    81: "(((((0x8C5F ^ 0x8BDA) + (0x7A7E << 2) - (0x7A7E << 2) + 0x5D8B - 0x5D06) * 0x1F5E + 0x4C9D - 0x4C9D) % 100) + 41) % 100",
    82: "((((0x2F7E * 0x9C9A + 0x6D7B - 0x2F7E * 0x9C9A - 0x6C55) + (0x8E2F << 3) - (0x8E2F << 3)) % 100) + -12) % 100",
    83: "(((((0x7E5F ^ 0x7DD8) * 0x3B7A + 0x9C9D - 0x3B7A + 0x5F1E - 0x9C9D - 0x5E97) << 2) % 100) + 35) % 100",
    84: "((((0x5A8E * 0x4D7F + 0x7C9B - 0x5A8E * 0x4D7F - 0x7BFB) + (0x2E5F << 4) - (0x2E5F << 4)) % 100) + 24) % 100",
    85: "(((((0x9C7E ^ 0x9BF1) + (0x6B7A << 2) - (0x6B7A << 2) + 0x8D9F - 0x8D12) * 0x5E2F + 0x7A5C - 0x7A5C) % 100) + 49) % 100",
    86: "((((0x4E9F * 0x7C7A + 0x5D9B - 0x4E9F * 0x7C7A - 0x5CE9) + (0x6F5E << 3) - (0x6F5E << 3)) % 100) + 8) % 100",
    87: "(((((0x6D8F ^ 0x6D00) * 0x5A7C + 0x7E9B - 0x5A7C + 0x4F1E - 0x7E9B - 0x4E8F) << 1) % 100) + 25) % 100",
    88: "((((0x8F7E * 0x2A9D + 0x9C5B - 0x8F7E * 0x2A9D - 0x9B43) + (0x1E2F << 5) - (0x1E2F << 5)) % 100) + 8) % 100",
    89: "(((((0x3C5E ^ 0x3BCD) + (0x9B7A << 2) - (0x9B7A << 2) + 0x6E9F - 0x6E0E) * 0x7F2D + 0x5A5C - 0x5A5C) % 100) + 1) % 100",
    90: "((((0x7A9E * 0x5F9C + 0x2D7B - 0x7A9E * 0x5F9C - 0x2C41) + (0x6E5F << 3) - (0x6E5F << 3)) % 100) + 76) % 100",
    91: "(((((0x5E7F ^ 0x5DEC) * 0x8C7A + 0x4D9B - 0x8C7A + 0x7F1E - 0x4D9B - 0x7E8B) << 2) % 100) + 31) % 100",
    92: "((((0x9C8E * 0x3F9A + 0x6B7D - 0x9C8E * 0x3F9A - 0x6A1F) + (0x5E1F << 4) - (0x5E1F << 4)) % 100) + 42) % 100",
    93: "(((((0x4D7E ^ 0x4CE3) + (0x8A7C << 2) - (0x8A7C << 2) + 0x9F9B - 0x9F00) * 0x2E1F + 0x6C5D - 0x6C5D) % 100) + 17) % 100",
    94: "((((0x6E8F * 0x9A9C + 0x3D7B - 0x6E8F * 0x9A9C - 0x3BF7) + (0x7F5E << 3) - (0x7F5E << 3)) % 100) + 6) % 100",
    95: "(((((0x8F5E ^ 0x8EBD) * 0x6C7A + 0x2D9B - 0x6C7A + 0x5E5F - 0x2D9B - 0x5DBE) << 1) % 100) + 93) % 100",
    96: "((((0x2D6E * 0x8F9C + 0x5A7B - 0x2D6E * 0x8F9C - 0x58AB) + (0x4E1F << 5) - (0x4E1F << 5)) % 100) + 32) % 100",
    97: "(((((0x7C5F ^ 0x7BB6) + (0x9A9E << 2) - (0x9A9E << 2) + 0x6D7B - 0x6CD2) * 0x5F5E + 0x8A2C - 0x8A2C) % 100) + 81) % 100",
    98: "((((0x5E9F * 0x4C7A + 0x8D9B - 0x5E9F * 0x4C7A - 0x8C3F) + (0x2F1E << 3) - (0x2F1E << 3)) % 100) + 50) % 100",
    99: "(((((0x9D7E ^ 0x9CD3) * 0x5A9C + 0x7F7B - 0x5A9C + 0x4E1D - 0x7F7B - 0x4D72) << 2) % 100) + 63) % 100",
}


def test_dictionaries():
    for d in [HARD_DICT, MEDIUM_DICT]:
        for i in range(100):
            assert int(eval(d[i])) == i, f"{d[i]} doesn't evaluate to {i}"
    print("test passed")


if __name__ == "__main__":
    test_dictionaries()
